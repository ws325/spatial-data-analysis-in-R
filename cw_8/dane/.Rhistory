#cw8
plot(diamonds$price, diamonds$carat, pch=17)
#cw8
plot(diamonds$price, diamonds$carat, pch=19)
#cw9
plot(log(diamonds$price), log(diamonds$carat), pch=19)
#cw9
plot(mutate(log(diamonds$price)), log(diamonds$carat), pch=19)
#cw9
ndf = diamonds %>% mutate(log_price=log10(price), log_carat=log10(carat))
ggplot(ndf, aes(log_carat, log_price)) + geom_point()
#cw9
plot(log(diamonds$price), log(diamonds$carat), pch=19)
#cw9
ndf = diamonds %>% mutate(log_price=log10(price), log_carat=log10(carat))
ggplot(ndf, aes(log_carat, log_price)) + geom_point()
#cw10
model <- lm(log10(diamonds$price) ~ log10(diamonds$carat), data = diamonds)
fmodel(model)
#cw10
model_1 <- lm(log10(diamonds$price) ~ log10(diamonds$carat), data = diamonds)
fmodel(model_1)
#zad11
model_2 <- lm(log10(diamonds$price) ~ diamonds$color+diamonds$cut, data = diamonds)
summary(model_2)
#cw9
ndf = diamonds %>% mutate(log_price=log10(diamonds$price), log_carat=log10(diamonds$carat))
ggplot(ndf, aes(log_carat, log_price)) + geom_point()
library(MASS)
data<-survey
data
library("MASS")
data<-survey
data
tail(data)
mean(data$Age)
mean(data$Age, na.rm=TRUE)
sd(data$Age, na.rm=TRUE)
round(data_mean+c(-1,1)*sigma/sqrt(32)*qnorm(.975),2)
data_mean<-mean(data$Age, na.rm=TRUE)
sigma<-sd(data$Age, na.rm=TRUE)
round(data_mean+c(-1,1)*sigma/sqrt(32)*qnorm(.975),2)
round(data_mean+c(-1,1)*sigma/sqrt(237)*qnorm(.975),2)
round(data_mean+c(-1,1)*sigma/sqrt(168)*qnorm(.975),2)
count(survey)
count(survey)
count(survey)
data<-na.omit(survey)
data
count(data)
#zad2
round(data_mean+c(-1,1)*sigma/sqrt(168)*qnorm(.975),2)
funn(2,4)
fun<-function(x,y){
return 2*x+y
}
fun<-function(x,y)
{
return 2*x+y
}
fun<-function(x,y)
{
return( 2*x+y )
}
funn(2,4)
fun(2,4)
12
library(fields)
library(rgdal)
library(sp)
#Ładowanie bibliotek
install.packages("ncdf4")
install.packages("fields")
install.packages("raster")
install.packages("dylyr")
install.packages("dplyr")
install.packages("sp")
install.packages("sp")
install.packages("rgdal")
install.packages("rgdal")
install.packages("terra")
install.packages("terra")
install.packages("purr")
install.packages("purrr")
install.packages("purrr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("tidyr")
install.packages("terra")
install.packages("terra")
install.packages("dplyr")
install.packages("dplyr")
install.packages("rgdal")
install.packages("rgdal")
library(terra) #do budowania rastra, alternatywa pakietu raster
install.packages("rgdal")
install.packages("rgdal")
install.packages("rgdal")
library("MASS")
dim(cats)
head(cats)
plot( cats$Bwt, cats$Hwt, pch=19)
plot( cats$Bwt, cats$Hwt, pch=19, xlab="Btw(kg)", ylab="Hwt(g)")
plot( cats$Bwt, cats$Hwt, pch=19, xlab="Btw (kg)", ylab="Hwt (g)", main="Wykres 1")
#zad 2
x<-cats$Btw-mean(cats$Bwt)
y<-cats$Htw-mean(cats$Hwt)
#zad 2
x<-cats$Btw-mean(cats$Bwt)
y<-cats$Htw-mean(cats$Hwt)
cow_<-sum(x*y)/(n-1)
cow_<-sum(x*y)/(size(cats$Bwt)-1)
size(cats$Bwt)
dim(cats)
n<-dim(cats[1])
n
n<-dim(cats)
n[0]
n[1]
cow_<-sum(x*y)/(n[1]-1)
cow_
#zad 2
x<-cats$Btw-mean(cats$Bwt)
y<-cats$Htw-mean(cats$Hwt)
n<-dim(cats)
cov_<-sum(x*y)/(n[1]-1)
cov_
n
n_1<-n[1]
n_1
cov_<-sum(x*y)/(n[1]-1)
cov_
cov_<-sum(x*y)/(n_1-1)
cov_
sum(x*y)
sum(x*y)
x
y
#zad 2
x<-cats$Bwt-mean(cats$Bwt)
x
y<-cats$Hwt-mean(cats$Hwt)
y
n<-dim(cats)
n_1<-n[1]
n_1
cov_<-sum(x*y)/(n_1-1)
cov_
cov(x,y)
#zad 3
cov(cats$Bwt,cats$Hwt)
#zad 3
cov(cats$Bwt,cats$Hwt)
cor(cats$Bwt,cats$Hwt)
#zad 5
cor.test(cats$Bwt,cats$Hwt)
#zad 6
cats.mod<-lm(cats$Hwt ~ cats$Bwt, data = cats)
summary(cats.mod)
#zad 7
library(dplyr)
ggscatter(cats, cats$Bwt, cats$Hwt, pch=19)
ggscatter(cats, cats$Bwt, cats$Hwt)
#zad 7
library(dplyr)
#zad 7
library("dplyr")
ggscatter(cats, cats$Bwt, cats$Hwt, )
install.packages("ggpubr")
library("ggpubr")
ggscatter(cats, cats$Bwt, cats$Hwt )
ggscatter(cats, cats$Bwt, cats$Hwt )
ggscatter(cats, cats$Bwt, cats$Hwt, merge = FALSE )
ggscatter(cats, cats$Bwt, cats$Hwt, merge = FALSE, combine = FALSE )
ggscatter(cats, cats$Bwt, cats$Hwt, merge = FALSE, combine = FALSE, shape = 19 )
ggscatter(cats, cats$Bwt, cats$Hwt, merge = FALSE, combine = FALSE, shape = 19 )
ggscatter(cats, cats$Bwt, cats$Hwt )
ggscatter(cats, x = "Bwt", y = "Hwt" )
ggscatter(cats, x = "Bwt", y = "Hwt", cor.coef = TRUE, cor.method = "pearson" )
ggscatter(cats, x = "Bwt", y = "Hwt", cor.coef = TRUE, cor.method = "pearson",
add = "reg.line", add.params = list(color = "black", fill = "lightgray" )  )
ggscatter(cats, x = "Bwt", y = "Hwt", cor.coef = TRUE, cor.method = "pearson",
add = "reg.line", add.params = list(color = "red", fill = "lightgray" )  )
ggscatter(cats, x = "Bwt", y = "Hwt", cor.coef = TRUE, cor.method = "pearson",
add = "reg.line", add.params = list(color = "black", fill = "yellow" )  )
ggscatter(cats, x = "Bwt", y = "Hwt", cor.coef = TRUE, cor.method = "pearson",
add = "reg.line", add.params = list(color = "black", fill = "yellow" ), conf.int = TRUE  )
ggscatter(cats, x = "Bwt", y = "Hwt", cor.coef = TRUE, cor.method = "pearson",
add = "reg.line", add.params = list(color = "black", fill = "lightgray" ), conf.int = TRUE  )
#zad 2
x<-cats$Bwt-mean(cats$Bwt)
y<-cats$Hwt-mean(cats$Hwt)
n<-dim(cats)
cov_<-sum(x*y)/(n[1]-1)
cov_
#zad 3
cov(cats$Bwt,cats$Hwt)
cor(cats$Bwt,cats$Hwt)
#zad 3
cov(x,y)
cor(x,y)
#zad 5
cor.test(cats$Bwt,cats$Hwt)
#zad 6
cats.mod<-lm(cats$Hwt ~ cats$Bwt, data = cats)
summary(cats.mod)
runif(200)
runif(200, [0,1], [0,1])
runif(200, win=owin(xrange=c(0,1), yrange=c(0,2))))
runif(200, win=owin(xrange=c(0,1), yrange=c(0,2)))
runif(200, win=owin(xrange=c(0,1), yrange=c(0,2))
runif(200, win=owin(xrange=c(0,1), yrange=c(0,2)))
install.packages("spatstat")
points<-runifpoint(200, win=owin(xrange=c(0,1), yrange=c(0,2)))
points<-runif(200, win=owin(xrange=c(0,1), yrange=c(0,2)))
points<-runif(200, owin(xrange=c(0,1), yrange=c(0,2)))
points<-runif(200, win=owin(xrange=c(0,1), yrange=c(0,2)))
library("spatstat")
points<-runif(200, win=owin(xrange=c(0,1), yrange=c(0,2)))
points<-runif(200, win=owin(c(0,1), c(0,2)))
points<-runif(200, win=owin(c(0,1), c(0,2)))
points<-runif(n=200, win=owin(c(0,1), c(0,2)))
points<-runifpoint(n=200, win=owin(c(0,1), c(0,2)))
points
#zad 1
points<-runifpoint(n=200, win=owin(c(0,1), c(0,2)))
points
#zad 1
points<-runif(n=200, win=owin(c(0,1), c(0,2)))
#zad 1
points<-runif(n=200)
points
#zad 1
points<-runif(n=200, min=0, max=2)
points
#zad 1
points<-runifpoints(n=200, win=owin(c(0,1), c(0,2)))
#zad 1
points<-runifpoint(n=200, win=owin(c(0,1), c(0,2)))
points
#zad 1
#points<-runifpoint(n=200, win=owin(c(0,1), c(0,2)))
x<-runif(n=200, min=0, max=1)
y<-runif(n=200, min=0, max=2)
#zad 2
plot(points)
#dla sposobu 2
plot(x,y)
#zad 2
x
y
#zad 4
draw.circle(x,y,radius,nv=100,border=NULL,col=NA,lty=1,density=NULL,
angle=45,lwd=1)
#zad 4
draw.circle(x,y,50)
#zad 4
r<-runif(n=300, min=0, max=1)
angle<-runif(300, min=0, max=2*pi)
x<-r*cos(angle)
y<-r*sin(angle)
plot(x, y, pch=19, asp=1)
#zad 4
r<-runif(n=300, min=0, max=1)
angle<-runif(300, min=0, max=100*pi)
x<-r*cos(angle)
y<-r*sin(angle)
#zad 4
r<-runif(n=300, min=0, max=100)
angle<-runif(300, min=0, max=2*pi)
x<-r*cos(angle)
y<-r*sin(angle)
plot(x, y, pch=19, asp=1)
#zad 4
r_squared<-runif(n=300, min=0, max=100)
angle<-runif(300, min=0, max=2*pi)
x<-r_squared*cos(angle)
y<-r_squared*sin(angle)
plot(x, y, pch=19, asp=1)
plot(disc(x, y), pch=19, asp=1)
plot(disc(r_squared), pch=19, asp=1)
plot(disc(r_squared), pch=19, asp=1)
disc(r_squared)
disc(radius=100, centre=c(0,0))
plot(disc(radius=100, centre=c(0,0)))
plot(disc(radius=10, centre=c(0,0)))
plot(x,y,disc(radius=10, centre=c(0,0)))
plot(disc(radius=10, centre=c(0,0)))
plot(disc(radius=10, centre=c(0,0)))
plot(x,y,disc(radius=10, centre=c(0,0)))
ggplot(x,y,disc(radius=10, centre=c(0,0)))
source("~/Untitled.R")
p_pois <- dpois(x, lambda, log = FALSE)
p_pois <- ppois(10, 15)
p_pois
library("ggplot2")
library("spatstat")
p_pois<-dpois(0:10, lambda = 5)
p_pois
p_pois<-dpois(0:100, lambda = 5)
p_pois
plot(p_pois)
plot(x_pois, y_pois)
x_pois<-dpois(0:100, lambda = 5)
y_pois<-dpois(0:100, lambda = 5)
plot(x_pois, y_pois)
rpoispp(10, 15)
rpoispp(10, 15, win=disc(10))
plot(rpoispp(10, 15, win=disc(10)))
plot(rpoispp(1, 3, win=disc(10)))
plot(rpoispp(1, 2, win=disc(10)))
plot(rpoispp(10, 12, win=disc(10)))
plot(rpoispp(1, lmax=NULL, win=disc(10)))
#b
rStrauss(1, gamma = 1, window(disc(10)))
#b
rStrauss(1, gamma = 1, win=disc(10))
#b
rStrauss(1, gamma = 1, W=owin(disc(10)))
#b
plot(rStrauss(1, gamma = 1, W=owin(disc(10))))
#b
plot(rStrauss(1, gamma = 4, W=owin(disc(10))))
#b
plot(rStrauss(1, gamma = 0.5, W=owin(disc(10))))
#b
plot(rStrauss(1, gamma = 0.4, W=owin(disc(10))))
#b
p_reg<-rStrauss(1, gamma = 0.4, W=owin(disc(10))))
#b
p_reg<-rStrauss(1, gamma = 0.4, W=owin(disc(10)))
plot(p_reg)
plot(p_pois)
#a
p_pois<-rpoispp(1, lmax=NULL, win=disc(10))
plot(p_pois)
plot(p_reg, add = TRUE)
#c
rThomas(2, win=owin(disc(10)))
#c
rThomas(1, scale = 1, win=owin(disc(10)))
#c
rThomas(1, scale = 1, mu=1, win=owin(disc(10)))
#c
plot(rThomas(1, scale = 1, mu=1, win=owin(disc(10))))
#c
asd<-rThomas(, scale = 1, mu=1, win=owin(disc(10)))
#c
asd<-rThomas(1, scale = 1, mu=1, win=owin(disc(10)))
plot(rThomas(asd, scale = 1, mu=1, win=owin(disc(10))))
plot(rThomas(5, scale = 1, mu=1, win=owin(disc(10))))
plot(rThomas(0.1, scale = 1, mu=1, win=owin(disc(10))))
plot(rThomas(0.1, scale = 1, mu=1, win=owin(disc(10))))
plot(rThomas(0.1, scale = 1, mu=1, win=owin(disc(10))))
plot(rThomas(0.1, scale = 1, mu=1, win=owin(disc(10))))
plot(rThomas(0.1, scale = 1, mu=1, win=owin(disc(10))))
#c
asd<-rThomas(rpoispp(1, lmax=NULL, win=disc(10)), scale = 1, mu=1, win=owin(disc(10)))
#c
r_squared<-runif(n=300, min=0, max=100)
angle<-runif(300, min=0, max=2*pi)
x_2<-sqrt(r_squared)*cos(angle)
y_2<-sqrt(r_squared)*sin(angle)
points_2<-data_frame(x_2,y_2)
asd<-rThomas(points_2, scale = 1, mu=1, win=owin(disc(10)))
#c
r_squared<-runif(n=300, min=0, max=100)
angle<-runif(300, min=0, max=2*pi)
x_2<-sqrt(r_squared)*cos(angle)
y_2<-sqrt(r_squared)*sin(angle)
points_2<-data_frame(x_2,y_2)
asd<-rThomas(points_2, scale = 1, mu=1, win=owin(disc(10)))
#c
r_squared<-runif(n=300, min=0, max=100)
angle<-runif(300, min=0, max=2*pi)
x_2<-sqrt(r_squared)*cos(angle)
y_2<-sqrt(r_squared)*sin(angle)
points_2<-data.frame(x_2,y_2)
asd<-rThomas(points_2, scale = 1, mu=1, win=owin(disc(10)))
plot(p_pois)
#a
p_poi<-rpoispp(1, lmax=NULL, win=disc(10))
plot(p_pois)
#b
p_reg<-rStrauss(1, gamma = 0.4, W=owin(disc(10)))
plot(p_reg)
#c
p_clu<-rThomas(kappa = 0.1, scale = 1, mu=7, win = disc(10))
plot(p_pois, main = "Rozklad niezalezny")
plot(p_reg, main = "Rozklad regularny")
#zad 2
nndist(p_poi)
#zad 2
hist(nndist(p_poi))
hist(nndist(p_reg))
hist(nndist(p_clu))
points1 <- rpoispp(1, win = disc(10))
# punkty sa rownomiernie rozmieszczone w oknie
points3 <- rThomas(kappa = 0.1, scale = 1, mu=7, win = disc(10))
plot(points2)
plot(points3)
# parametry
# points1: lamda=1
# points2: beta=1, gamma=0.5
# points3: kappa=0.1, mu=7, scale=1
```{r}
hist(nndist(points1))
hist(nndist(points2))
hist(nndist(points3))
hist(nndist(points1))
hist(nndist(points2))
```{r}
gp1 <- ecdf(nndist(points1))
gp2 <- ecdf(nndist(points2))
#zad 3
Gest(p_poi, nndist(p_poi))
#zad 3
Gest(p_poi)
#zad 3
plot(Gest(p_poi)
#zad 3
plot(Gest(p_poi))
#zad 3
plot(Gest(p_poi))
#zad 3
plot(Gest(p_poi))
plot(Gest(p_reg))
plot(Gest(p_clu))
#zad 5
Kest(p_poi, correction="border")
#zad 5
plot(Kest(p_poi, correction="border"), .~r)
#zad 6
plot(distmap(p_poi))
plot(distmap(p_reg))
plot(distmap(p_clu))
# dla wartosci: eps=5, minPts = 5
dbscan_1 <- dbscan(data, eps=5, minPts = 5)
library(sp)
library("readxl")
library(spatstat)
library(dbscan)
library(tidyverse)
library(ggplot2)
library(raster)
####----------------------------------------------------------
#ndadanie wczytanym danym ukladu wspolrzednych ETRS 1989 Poland CS2000 Zone 7 - EPSG:2178
data <- read_excel("zestaw8.xlsx", col_types = c("numeric", "numeric"))
head(data)
dim(data)
coord <- SpatialPoints(cbind(data$Long, data$Lat), proj4string = CRS("+proj=longlat"))
coordUTM <- spTransform(coord, CRS("+init=epsg:2178"))
dataUTM <- data.frame(coordUTM)
head(dataUTM)
####----------------------------------------------------------
#ndadanie wczytanym danym ukladu wspolrzednych ETRS 1989 Poland CS2000 Zone 7 - EPSG:2178
data <- read_excel("zestaw8.xlsx", col_types = c("numeric", "numeric"))
setwd("~/Desktop/Studia/V semestr/Analiza danych przrstrzennych/cw_8/dane")
####----------------------------------------------------------
#ndadanie wczytanym danym ukladu wspolrzednych ETRS 1989 Poland CS2000 Zone 7 - EPSG:2178
data <- read_excel("zestaw8.xlsx", col_types = c("numeric", "numeric"))
head(data)
dim(data)
coord <- SpatialPoints(cbind(data$Long, data$Lat), proj4string = CRS("+proj=longlat"))
coordUTM <- spTransform(coord, CRS("+init=epsg:2178"))
dataUTM <- data.frame(coordUTM)
head(dataUTM)
colnames(dataUTM) <- c("Lon", "Lat")
write.csv2(dataUTM, "data_out.csv", row.names = F)
#wczytanie danych po zmianie ukladu wspolrzednych oraz osiedla.shp
data <- read.csv2('data_out.csv')
head(data)
data_dist <- shapefile("osiedla.shp")
#stworzenie mapy Krakowa z podzialem na dzielnice
cra_map <- ggplot() +
geom_polygon(data_dist, aes(x = long, y = lat, group = group),
show.legend = FALSE, color = "black", fill = "white")  + coord_fixed()
#wczytanie danych po zmianie ukladu wspolrzednych oraz osiedla.shp
data <- read.csv2('data_out.csv')
head(data)
data_dist <- shapefile("osiedla.shp")
#stworzenie mapy Krakowa z podzialem na dzielnice
cra_map <- ggplot() +
geom_polygon(data_dist, aes(x = long, y = lat, group = group),
show.legend = FALSE, color = "black", fill = "white")  + coord_fixed()
#stworzenie mapy Krakowa z podzialem na dzielnice
cra_map <- ggplot() + geom_polygon(data_dist, aes(x = long, y = lat, group = group),
show.legend = FALSE, color = "black", fill = "white")  + coord_fixed()
#stworzenie mapy Krakowa z podzialem na dzielnice
cra_map <- ggplot() + geom_polygon(data_dist, aes(x = long, y = lat, group = group),
show.legend = FALSE, color = "black", fill = "white")  + coord_fixed()
data_dist <- shapefile("osiedla.shp")
#stworzenie mapy Krakowa z podzialem na dzielnice
cra_map <- ggplot() + geom_polygon(data_dist, aes(x = long, y = lat, group = group),
show.legend = FALSE, color = "black", fill = "white")  + coord_fixed()
#stworzenie mapy Krakowa z podzialem na dzielnice
cra_map <- ggplot() + geom_polygon(data_dist, aes(x = long, y = lat, group = group),
show.legend = FALSE, color = "black", fill = "white")  + coord_fixed()
#stworzenie mapy Krakowa z podzialem na dzielnice
cra_map <- ggplot() + geom_polygon(data_dist, aes(x = long, y = lat, group = group), show.legend = FALSE, color = "black", fill = "white")  + coord_fixed()
data_dist
#stworzenie mapy Krakowa z podzialem na dzielnice
cra_map <- ggplot() + geom_polygon(data_dist, aes(x = long, y = lat, group = group), show.legend = FALSE, color = "black", fill = "white")  + coord_fixed()
library(sp)
library("readxl")
library(spatstat)
library(dbscan)
library(tidyverse)
library(ggplot2)
library(raster)
#stworzenie mapy Krakowa z podzialem na dzielnice
cra_map <- ggplot() + geom_polygon(data_dist, aes(x = long, y = lat, group = group), show.legend = FALSE, color = "black", fill = "white")  + coord_fixed()
